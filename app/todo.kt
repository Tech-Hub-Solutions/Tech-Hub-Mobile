/*
* 1. ComeÃ§ar criando estrutura de diretÃ³rios:
*   - common
*       ğŸ“„Constants.kt - Object
*       ğŸ“„Resource.kt - Sealed Class
*       ğŸ“‚ enums
*       ğŸ“„ Screen - Sealed Class
*   - presentation
*       ğŸ“‚ feature1
*           ğŸ“‚ components
*       ğŸ“‚ feature2
*           ğŸ“‚ components
*       ğŸ“‚ ui.theme
*       ğŸ“„ MainActivity.kt
*   - domain
*       ğŸ“‚ model - Data classes (classes com apenas os dados que serÃ£o renderizados no front)
*       ğŸ“‚ repository
*       ğŸ“‚ usec_ase
*           ğŸ“‚ feature1
*           ğŸ“‚ feature2
*   - data
*       ğŸ“‚ remote
*           ğŸ“‚ dto - Data classes  (classes com os dados que serÃ£o recebidos do back)
*           ğŸ“„ UsuarioApi - Interface
*       ğŸ“‚ repository
*
*   - di
*
* 2. Cria a interface de conexÃ£o com a API
*   Esta conterÃ¡ os mÃ©todos do Retrofit p/ requisiÃ§Ãµes HTTP
*   Deve ser contextual e conter apenas os mÃ©todos necessÃ¡rios para a feature
*   Exemplo: UsuarioApi.kt
*
* 3. Cria as classes de Data Transfer Object (DTO)
*   Estas classes conterÃ£o os dados brutos que serÃ£o recebidos do back
*   Dentro delas pode-se criar funÃ§Ãµes de extensÃ£o para mapear os dados para as classes de modelo
*   Exemplo: fun CoinDto.toCoin(): Coin {
*       id = id,
*       name = name
*   }
*
* 4. Criar a classe de model
*   Esta classe conterÃ¡ apenas os dados que serÃ£o renderizados no front
*   SerÃ¡ o retorno das funÃ§Ãµes dentreo da DTO
*   Exemplo: Coin.kt
*
* 5. Criar a Interface de repositÃ³rio dentro do Domain
*   Esta conterÃ¡ os mÃ©todos que serÃ£o chamados pela ViewModel
*   Essa abordagem ajuda no teste unitÃ¡rio, pois Ã© possÃ­vel criar um mock/stub do repositÃ³rio
*   ViewModel Ã© quem chama o repositÃ³rio e serve para fazer a ponte entre a UI e o repositÃ³rio da camada de dados
*   Exemplo: CoinRepository.kt
*
* 6. Criar a Interface de repositÃ³rio dentro da camada de dados
*   Esta conterÃ¡ as implementaÃ§Ãµes dos mÃ©todos do repositÃ³rio do Domain
*   Isso tem como benefÃ­cio a separaÃ§Ã£o de responsabilidades e a possibilidade de trocar a fonte de dados sem alterar a UI
*   Exemplo: UsuarioRepositoryImpl.kt
    *   class UsuarioRepositoryImpl @Inject constructor(
        private val api: UsuarioApi
        ) : UsuarioRepository {
            override suspend fun login(usuario: UsuarioLoginData): UsuarioTokenData {
                return api.loginUser(usuario)
            }
        }
*
* 7. Criar os user_cases
*   Estes conterÃ£o a lÃ³gica de negÃ³cio da aplicaÃ§Ã£o
*   SÃ£o responsÃ¡veis por orquestrar as chamadas ao repositÃ³rio
*   UsuarÃ£o o repositÃ³rio para fazer as chamadas ao back e retornar os dados para a ViewModel
*
*   Sobrecreva o operador invoke para chamar o mÃ©todo do repositÃ³rio
*   Exemplo: operador fun invoke(): Flow<Resource<UsuarioTokenData>>
*   Use Flow (kotlinx.coroutines.flow.Flow), pois ele Ã© assÃ­ncrono e pode ser observado
*   Use o Resource para encapsular o retorno da chamada ao back
*   Utilize try/catch ou o Either para tratar os erros e exceÃ§Ãµes, emitindo (emit()) o Resource especÃ­fico
*
* 8. Criar a InjeÃ§Ã£o de DependÃªncia no diretÃ³rio di
*   Crie um mÃ³dulo para cada camada (data, domain, presentation)
*   Ela Ã© responsÃ¡vel por prover as instÃ¢ncias das classes que serÃ£o injetadas
*   O propÃ³sito Ã© desacoplar as classes e facilitar a troca de implementaÃ§Ã£o
*   NÃ£o precisando alterar a classe que usa a dependÃªncia de forma hard-coded
*   Exemplo: AppModule.kt
*
*   Use a anotaÃ§Ã£o @Module para definir a classe como um mÃ³dulo
*   Use a anotaÃ§Ã£o @InstallIn(SingletonComponent::class) para definir o escopo da injeÃ§Ã£o para a duraÃ§Ã£o da vida do app
*   Use a anotaÃ§Ã£o @Provides para prover a instÃ¢ncia da classe
*   Use a anotaÃ§Ã£o @Singleton para definir que a instÃ¢ncia serÃ¡ Ãºnica durante toda a vida do app
*   Crie funÃ§Ãµes para prover as instÃ¢ncias das classes, usando a Interface API como parÃ¢metro e retornando a implementaÃ§Ã£o
*   Exemplo: fun provideUsuarioRepository(api: UsuarioApi): UsuarioRepository
*
* 8. Crie uma Application do app na raiz do projeto
*   Esta classe Ã© responsÃ¡vel por inicializar o Hilt na aplicaÃ§Ã£o inteira
*   Use a anotaÃ§Ã£o @HiltAndroidApp para definir a classe como a classe geral de aplicaÃ§Ã£o
*   Exemplo:
*       @HiltAndroidApp
*       class TechHubApplication : Application()
*
*   Precisa declarar no AndroidManifest.xml dentro da tag <application>
*   Exemplo: android:name=".TechHubApplication"
*
* 9. Crie a ViewModel dentro do diretÃ³rio de presentation
*   Toda a lÃ³gica de negÃ³cio estÃ¡ sendo feita no user_case
*   A View Model terÃ¡ a principal responsabilidade de manter o estado da UI, mesmo apÃ³s mudanÃ§a de configuraÃ§Ãµes
*       do dispositivo (e.g. rotaÃ§Ã£o, idioma, tema)
*   Ela Ã© quem chama os user_cases e observa os dados que serÃ£o renderizados na UI
*   Elas tambÃ©m podem gerenciar os dados da UI e a lÃ³gica de negÃ³cio
*   FaÃ§a uma ViewModel para cada tela/ Activity/ Fragment
*   No constructor, injete o user_case que serÃ¡ utilizado ao invÃ©s do repository
*
*
*
* */
